package LibDL.Tensor.Operator;


import LibDL.Tensor.Variable;
import org.junit.Test;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

import static org.junit.Assert.assertEquals;

public class UnfoldTest {
    @Test
    public void testUnfold() {
        Variable input = new Variable(Nd4j.linspace(1, 192, 192).reshape(2, 2, 8, 6), true);
        Unfold m = new Unfold.Builder(input, 2, 3).padding(2, 1).stride(2, 3).dilation(2, 1).build();
        m.forwardWithInput();
        INDArray expected = Nd4j.create(new double[][][] {
                {{  0.,   0.,   0.,   3.,   0.,  15.,   0.,  27.,   0.,  39.},
                 {  0.,   0.,   1.,   4.,  13.,  16.,  25.,  28.,  37.,  40.},
                 {  0.,   0.,   2.,   5.,  14.,  17.,  26.,  29.,  38.,  41.},
                 {  0.,   3.,   0.,  15.,   0.,  27.,   0.,  39.,   0.,   0.},
                 {  1.,   4.,  13.,  16.,  25.,  28.,  37.,  40.,   0.,   0.},
                 {  2.,   5.,  14.,  17.,  26.,  29.,  38.,  41.,   0.,   0.},
                 {  0.,   0.,   0.,  51.,   0.,  63.,   0.,  75.,   0.,  87.},
                 {  0.,   0.,  49.,  52.,  61.,  64.,  73.,  76.,  85.,  88.},
                 {  0.,   0.,  50.,  53.,  62.,  65.,  74.,  77.,  86.,  89.},
                 {  0.,  51.,   0.,  63.,   0.,  75.,   0.,  87.,   0.,   0.},
                 { 49.,  52.,  61.,  64.,  73.,  76.,  85.,  88.,   0.,   0.},
                 { 50.,  53.,  62.,  65.,  74.,  77.,  86.,  89.,   0.,   0.}},

                {{  0.,   0.,   0.,  99.,   0., 111.,   0., 123.,   0., 135.},
                 {  0.,   0.,  97., 100., 109., 112., 121., 124., 133., 136.},
                 {  0.,   0.,  98., 101., 110., 113., 122., 125., 134., 137.},
                 {  0.,  99.,   0., 111.,   0., 123.,   0., 135.,   0.,   0.},
                 { 97., 100., 109., 112., 121., 124., 133., 136.,   0.,   0.},
                 { 98., 101., 110., 113., 122., 125., 134., 137.,   0.,   0.},
                 {  0.,   0.,   0., 147.,   0., 159.,   0., 171.,   0., 183.},
                 {  0.,   0., 145., 148., 157., 160., 169., 172., 181., 184.},
                 {  0.,   0., 146., 149., 158., 161., 170., 173., 182., 185.},
                 {  0., 147.,   0., 159.,   0., 171.,   0., 183.,   0.,   0.},
                 {145., 148., 157., 160., 169., 172., 181., 184.,   0.,   0.},
                 {146., 149., 158., 161., 170., 173., 182., 185.,   0.,   0.}}
                });
        assertEquals(expected, m.out);
        m.dout = Nd4j.create(new double[][][] {
                {{  0.,   0.,   0.,   2.,   0.,  14.,   0.,  26.,   0.,  38.},
                 {  0.,   0.,   0.,   3.,  12.,  15.,  24.,  27.,  36.,  39.},
                 {  0.,   0.,   1.,   4.,  13.,  16.,  25.,  28.,  37.,  40.},
                 {  0.,   2.,   0.,  14.,   0.,  26.,   0.,  38.,   0.,   0.},
                 {  0.,   3.,  12.,  15.,  24.,  27.,  36.,  39.,   0.,   0.},
                 {  1.,   4.,  13.,  16.,  25.,  28.,  37.,  40.,   0.,   0.},
                 {  0.,   0.,   0.,  50.,   0.,  62.,   0.,  74.,   0.,  86.},
                 {  0.,   0.,  48.,  51.,  60.,  63.,  72.,  75.,  84.,  87.},
                 {  0.,   0.,  49.,  52.,  61.,  64.,  73.,  76.,  85.,  88.},
                 {  0.,  50.,   0.,  62.,   0.,  74.,   0.,  86.,   0.,   0.},
                 { 48.,  51.,  60.,  63.,  72.,  75.,  84.,  87.,   0.,   0.},
                 { 49.,  52.,  61.,  64.,  73.,  76.,  85.,  88.,   0.,   0.}},

                {{  0.,   0.,   0.,  98.,   0., 110.,   0., 122.,   0., 134.},
                 {  0.,   0.,  96.,  99., 108., 111., 120., 123., 132., 135.},
                 {  0.,   0.,  97., 100., 109., 112., 121., 124., 133., 136.},
                 {  0.,  98.,   0., 110.,   0., 122.,   0., 134.,   0.,   0.},
                 { 96.,  99., 108., 111., 120., 123., 132., 135.,   0.,   0.},
                 { 97., 100., 109., 112., 121., 124., 133., 136.,   0.,   0.},
                 {  0.,   0.,   0., 146.,   0., 158.,   0., 170.,   0., 182.},
                 {  0.,   0., 144., 147., 156., 159., 168., 171., 180., 183.},
                 {  0.,   0., 145., 148., 157., 160., 169., 172., 181., 184.},
                 {  0., 146.,   0., 158.,   0., 170.,   0., 182.,   0.,   0.},
                 {144., 147., 156., 159., 168., 171., 180., 183.,   0.,   0.},
                 {145., 148., 157., 160., 169., 172., 181., 184.,   0.,   0.}}});
        m.backward();
        expected = Nd4j.create(new double[][][][]{
                {{{  0.,   2.,   4.,   6.,   8.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  { 24.,  26.,  28.,  30.,  32.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  { 48.,  50.,  52.,  54.,  56.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  { 72.,  74.,  76.,  78.,  80.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.}},

                 {{ 96.,  98., 100., 102., 104.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {120., 122., 124., 126., 128.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {144., 146., 148., 150., 152.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {168., 170., 172., 174., 176.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.}}},


                {{{192., 194., 196., 198., 200.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {216., 218., 220., 222., 224.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {240., 242., 244., 246., 248.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {264., 266., 268., 270., 272.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.}},

                 {{288., 290., 292., 294., 296.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {312., 314., 316., 318., 320.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {336., 338., 340., 342., 344.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.},
                  {360., 362., 364., 366., 368.,   0.},
                  {  0.,   0.,   0.,   0.,   0.,   0.}}}});
        assertEquals(expected, input.dout);
    }
}
